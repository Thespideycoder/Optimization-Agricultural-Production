# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xs2LINixvsue7zw7YN9XNGh2ehjbVZT_

## ***Optimization of Agricultural Production***

***Importing important libraries***
"""

#for manipulation
import numpy as np
import pandas as pd

# for visualization
import seaborn as sns
import matplotlib.pyplot as plt

#for interactivity
from ipywidgets import interact

data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Agricultural data/data.csv")

data.head()

data.info()

print("Shape of the dataset:",data.shape)

data["label"].value_counts()

print("Overview of Dataset in stats terms : ")
data.describe()

@interact
def compare(conditions=["N","P","K","temperature","humidity","ph","rainfall"]):
  print("Crops which require more than the average", conditions,"\n")
  print(data[data[conditions]>data[conditions].mean()]["label"].unique())
  print("------------------------")
  print("Crops which require less than the average", conditions,"\n")
  print(data[data[conditions]<data[conditions].mean()]["label"].unique())

plt.figure(figsize=(12,12))
plt.subplot(2,4,1)
sns.distplot(data["N"],color="black")
plt.xlabel("Ratio of Nitrogen",fontsize=12)
plt.grid()

plt.subplot(2,4,2)
sns.distplot(data["P"],color="blue")
plt.xlabel("Ratio of Phosphorous",fontsize=12)
plt.grid()

plt.subplot(2,4,3)
sns.distplot(data["K"],color="grey")
plt.xlabel("Ratio of Potassium",fontsize=12)
plt.grid()

plt.subplot(2,4,4)
sns.distplot(data["temperature"],color="lightgreen")
plt.xlabel("Temperature",fontsize=12)
plt.grid()

plt.subplot(2,4,5)
sns.distplot(data["humidity"],color="black")
plt.xlabel("Humidity",fontsize=12)
plt.grid()

plt.subplot(2,4,6)
sns.distplot(data["ph"],color="darkgreen")
plt.xlabel("ph-value",fontsize=12)
plt.grid()

plt.subplot(2,4,7)
sns.distplot(data["rainfall"],color="black")
plt.xlabel("Rainfall",fontsize=12)
plt.grid()

plt.title("Distribution of Agricultural Conditions",fontsize=20)
plt.show()

"""Let's distribute the crops on the basis of seasons"""

print("Summer Crops.....")
print(data[(data["temperature"]>30) & (data["humidity"]>50)]["label"].unique())
print("__________________")
print("Rainy Crops.....")
print(data[(data["rainfall"]>200) & (data["humidity"]>30)]["label"].unique())
print("__________________")
print("Winter Crops.....")
print(data[(data["temperature"]<20) & (data["humidity"]>30)]["label"].unique())

from sklearn.cluster import KMeans

#removing the label column
x = data.drop(["label"],axis=1)
#selecting the data values
x = x.values
print(x.shape)

#splitting of the data set
y=data["label"]
x=data.drop(["label"],axis=1)
print("Shape of x:",x.shape)
print("Shape of y:",y.shape)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=0)
print("Shape of x_train:",x_train.shape)
print("Shape of y_train:",y_train.shape)
print("Shape of x_test:",x_test.shape)
print("Shape of y_test:",y_test.shape)

#creating the predictive model
from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)

from sklearn.metrics import confusion_matrix

cm=metrics.confusion_matrix(y_test,y_predict)
score = metrics.accuracy_score(y_test,y_pred)

plt.figure(figsize=(12,12))
sns.heatmap(cm, annot=True, fmt=".3f", linewidths=.8, square = True, cmap = 'Blues_r');
plt.ylabel('Actual label');
plt.xlabel('Predicted label');
all_sample_title = 'Accuracy Score: {0}'.format(score)
plt.title(all_sample_title, size =18);

prediction = model.predict((np.array([[90,
                                      40,
                                       40,
                                       20,
                                       80,
                                       7,
                                       200
                                      ]])))
print("The Suggested Crop for Given Climate Conditions is :",prediction)

